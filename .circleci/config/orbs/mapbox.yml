commands:
  add-mapbox-ssh-key:
    steps:
      - add_ssh_keys:
          fingerprints:
            - 9d:db:07:0b:62:81:11:c3:46:21:8e:fa:51:99:80:2d

  add-mapbox-netrc:
    parameters:
      token:
        type: string
        default: $SDK_REGISTRY_TOKEN
    steps:
      - run:
          name: Configure .netrc
          command: |
            echo "machine api.mapbox.com login mapbox password << parameters.token >>" >> ~/.netrc
            chmod 0600 ~/.netrc
            cat ~/.netrc

  add-mapbox-filetoken:
    parameters:
      token:
        type: string
        default: $MAPBOX_ACCESS_TOKEN
      path:
        type: string
        default: ~/.mapbox
    steps:
      - run:
          name: Add Mapbox Token to file
          command: |
            echo "<< parameters.token >>" > <<parameters.path>>

  install-mbx-ci:
    parameters:
      platform:
        type: enum
        enum:
          - auto
          - darwin
          - linux
        default: auto
      arch:
        type: enum
        enum:
          - auto
          - amd64
          - arm64
        default: auto
      install_path:
        type: string
        default: $HOME/mbx-ci/
      version:
        type: string
        default: latest
    steps:
      - run:
          name: Install << parameters.version >> mbx-ci
          command: |
            system="<< parameters.platform >>"
            if [ "$system" == "auto" ]; then
              system=$(uname -s | tr '[:upper:]' '[:lower:]')
            fi

            arch="<< parameters.arch >>"
            if [ "$arch" == "auto" ]; then
              arch=$(uname -m | sed 's/x86_64/amd64/')
            fi
            filename=mbx-ci-${system}-${arch}

            mbx_install_path="<< parameters.install_path >>"
            echo "Downloading ${filename} to ${mbx_install_path}/mbx-ci}"

            if [ ! -x "$mbx_install_path/mbx-ci" ]; then
                mkdir -p "$mbx_install_path"
                curl -Lf "https://mapbox-release-engineering.s3.amazonaws.com/mbx-ci/<<parameters.version>>/${filename}" -o "$mbx_install_path/mbx-ci"
                chmod 755 "$mbx_install_path/mbx-ci"
                echo 'export PATH=$PATH:$HOME/mbx-ci' >> $BASH_ENV
            fi
            "$mbx_install_path/mbx-ci" aws setup

  set-github-commit-status:
    parameters:
      hash:
        type: string
      state:
        type: enum
        enum:
          - pending
          - success
      repository:
        type: string
      company:
        type: string
        default: mapbox
      token:
        type: string
        default: $GITHUB_TOKEN
      target_url:
        type: string
        default: $CIRCLE_BUILD_URL
      description:
        type: string
        default: ""
      fail_description:
        type: string
        default: Job failed
      context:
        type: string
        default: "internal: $CIRCLE_JOB"
    steps:
      - run:
          name: Set github status
          command: |
            if [ -n "<< parameters.hash >>" ]; then
              curl -X "POST" "https://api.github.com/repos/<< parameters.company >>/<< parameters.repository >>/statuses/<< parameters.hash >>" \
                  -H "Authorization: Token << parameters.token >>" \
                  -H 'Content-Type: application/json; charset=utf-8' \
                  -d "{
                    \"target_url\": \"<< parameters.target_url >>\",
                    \"state\": \"<< parameters.state >>\",
                    \"description\": \"<< parameters.description >>\",
                    \"context\": \"<< parameters.context >>\"
                  }"
            fi
      - when:
          condition:
            equal: [<< parameters.state >>, success]
          steps:
             - run:
                name: Set github status
                command: |
                  if [ -n "<< parameters.hash >>" ]; then
                    curl -X "POST" "https://api.github.com/repos/<< parameters.company >>/<< parameters.repository >>/statuses/<< parameters.hash >>" \
                        -H "Authorization: Token << parameters.token >>" \
                        -H 'Content-Type: application/json; charset=utf-8' \
                        -d "{
                          \"target_url\": \"<< parameters.target_url >>\",
                          \"state\": \"failure\",
                          \"description\": \"<< parameters.fail_description >>\",
                          \"context\": \"<< parameters.context >>\"
                        }"
                  fi
                when: on_fail


  github-commit-progress:
    parameters:
      steps:
        type: steps
      commit:
        type: string
      repository:
        type: string
      company:
        type: string
        default: mapbox
      token:
        type: string
        default: $GITHUB_TOKEN
      target_url:
        type: string
        default: $CIRCLE_BUILD_URL
      context:
        type: string
        default: "internal: $CIRCLE_JOB"
    steps:
      - set-github-commit-status:
          company: << parameters.company >>
          context: << parameters.context >>
          description: MapboxCI is running your tests
          hash: << parameters.commit >>
          repository: << parameters.repository >>
          state: pending
          target_url: << parameters.target_url >>
          token: << parameters.token >>
      - steps: << parameters.steps >>
      - set-github-commit-status:
          company: << parameters.company >>
          context: << parameters.context >>
          description: Your tests passed on MapboxCI!
          fail_description: Your tests didn't pass on MapboxCI!
          hash: << parameters.commit >>
          repository: << parameters.repository >>
          state: success
          target_url: << parameters.target_url >>
          token: << parameters.token >>

  prepare-build-for-device-testing:
    parameters:
      derivedDataPath:
        type: string
      outputPath:
        type: string
      testingService:
        type: enum
        enum:
          - DeviceFarm
        default: DeviceFarm
      storeArtifacts:
        type: boolean
        default: true
    steps:
      - run:
          name: Assemble packages for device testing
          environment:
            DERIVED_DATA_PATH: << parameters.derivedDataPath >>
            OUTPUT_DATA_PATH: << parameters.outputPath >>
          command: |
            zip -r Products.zip $DERIVED_DATA_PATH/Build/Products/
            APP_PATH=$(find "$DERIVED_DATA_PATH" -name "*.app")
            TMP_PATH=$(mktemp -d)
            PAYLOAD_PATH="$TMP_PATH/Payload"

            mkdir -p "$PAYLOAD_PATH"
            mkdir -p "$OUTPUT_DATA_PATH"

            # Copy debug symbols
            DEBUG_SYMBOLS_PATH="$PAYLOAD_PATH/DebugSymbols"
            mkdir $DEBUG_SYMBOLS_PATH
            find $DERIVED_DATA_PATH/Build/Products/ -iname "*.dSYM" -exec cp -r {} $DEBUG_SYMBOLS_PATH \;
            find $DERIVED_DATA_PATH/Build/Products/ -iname "*.bcsymbolmap" -exec cp -r {} $DEBUG_SYMBOLS_PATH \;

            cp -R "$APP_PATH" "$PAYLOAD_PATH"

            # Copy the tests out
            XCTEST_PATH=$(find "$PAYLOAD_PATH" -name "*.xctest")

            cp -r "$XCTEST_PATH" "$TMP_PATH"

            # Copy the testrun in
            TMP_PAYLOAD_APP=$(find "$PAYLOAD_PATH" -name "*.app")
            cp "$DERIVED_DATA_PATH/Build/Products/"*.xctestrun  "$TMP_PAYLOAD_APP"

            # Zip up
            (
              cd "$TMP_PATH"
              zip -r App.ipa Payload
              zip -r AppTests.zip *.xctest
            )

            cp "$TMP_PATH/App.ipa" "$TMP_PATH/AppTests.zip" "$OUTPUT_DATA_PATH"
      - when:
          condition: << parameters.storeArtifacts >>
          steps:
            - store_artifacts:
                path: << parameters.outputPath >>/App.ipa
            - store_artifacts:
                path: Products.zip
            - store_artifacts:
                path: << parameters.outputPath >>/AppTests.zip
            - persist_to_workspace:
                root: << parameters.outputPath >>
                paths:
                  - App.ipa
                  - AppTests.zip
