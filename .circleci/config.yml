---
version: 2.1

parameters:
  maps-ios-checkout-reference:
    type: string
    default: ""
  run-tests:
    type: boolean
    default: false

workflows:
  benchmark:
    when:
      not: << pipeline.parameters.run-tests >>
    jobs:
      - build-benchmark:
          context:
            - SDK Registry Token
            - MapboxCI GitHub UserToken
      - build-maps:
          upload-size-metrics: false
          context:
            - SDK Registry Token
  run-benchmark:
    when: << pipeline.parameters.run-tests >>
    jobs:
      - build-benchmark:
          context:
            - SDK Registry Token
            - MapboxCI GitHub UserToken
      - run-benchmark:
          requires:
            - build-benchmark
      - collect-metrics:
          requires:
            - run-benchmark

      - build-maps:
          context:
            - SDK Registry Token
          upload-size-metrics: true

jobs:
  build-maps:
    executor: xcode-min
    parameters:
      upload-size-metrics:
        type: boolean
    steps:
      - checkout
      - mapbox/add-mapbox-ssh-key
      - mapbox/add-mapbox-netrc
      - mapbox/add-mapbox-filetoken
      - mapbox/install-mbx-ci
      - checkout-maps-submodule
      - build-maps-xcframework:
          upload-size-metrics: << parameters.upload-size-metrics >>

  build-benchmark:
    executor: xcode-min
    steps:
      - checkout
      - mapbox/add-mapbox-ssh-key
      - checkout-maps-submodule
      - checkout-maps-internal
      - mapbox/github-commit-progress:
          commit: $MAPS_COMMIT_HASH
          repository: mapbox-maps-ios
          token: $MAPBOXCI_GITHUB_USER_TOKEN
          steps:
            - mapbox/add-mapbox-netrc
            - mapbox/add-mapbox-filetoken
            - mapbox/install-mbx-ci
            - build-benchmark
            - mapbox/prepare-build-for-device-testing:
                derivedDataPath: benchmark/DerivedData
                outputPath: output

  run-benchmark:
    executor: base-docker
    steps:
      - checkout
      - mapbox/add-mapbox-ssh-key
      - mapbox/install-mbx-ci:
          platform: linux
      - checkout-mobile-metrics
      - attach_workspace:
          at: Products
      - run: ls -l Products/
      - run:
          name: Install AWSCLI (Linux)
          command: |
            cd /tmp
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
      - run:
          name: Schedule DeviceFarm run
          command: |
            mobile-metrics/ios-maps/Scripts/devicefarm.py \
              "$AWS_DEVICE_FARM_PROJECT_ARN" \
              --name "Benchmark_v2-$CIRCLE_SHA1-$CIRCLE_BUILD_NUM" \
              --device-pool "$AWS_DEVICE_POOL_ARN" \
              --ipa "Products/App.ipa" \
              --tests "Products/App.ipa" \
              --test-type XCTEST_UI \
              --spec benchmark/testspec.yml \
              --output benchmark_waiter.json
      - store_artifacts:
          path: benchmark_waiter.json
      - run:
          name: Wait for DeviceFarm results
          command: |
            mobile-metrics/ios-maps/Scripts/devicefarm.py \
              "$AWS_DEVICE_FARM_PROJECT_ARN" \
              --run-arn-file benchmark_waiter.json \
              --artifacts-dir BenchmarkResults \
              --output benchmark_results.json || true
      - persist_to_workspace:
          root: .
          paths:
            - benchmark_waiter.json
            - benchmark_results.json
      - run:
          name: Collect artifacts
          command: |
            zip -r BenchmarkResults.zip BenchmarkResults

            ARTIFACTS_PATH=$(find BenchmarkResults -name "Customer_Artifacts.zip" | head -n 1)
            unzip "$ARTIFACTS_PATH" -d artifacts
            find artifacts -name "*.xcresult" -exec cp -r {} metrics.xcresult \;
            zip -r metrics.xcresult.zip metrics.xcresult
          when: always
      - persist_to_workspace:
          root: .
          paths:
            - metrics.xcresult
            - BenchmarkResults
      - store_artifacts:
          path: BenchmarkResults.zip
      - store_artifacts:
          path: metrics.xcresult.zip
      - store_artifacts:
          path: benchmark_results.json

  collect-metrics:
    executor: xcode-min
    steps:
      - checkout
      - mapbox/add-mapbox-ssh-key
      - mapbox/install-mbx-ci
      - checkout-maps-submodule
      - run:
          name: Install AWSCLI
          command: pip3 install awscli requests
      - attach_workspace:
          at: workspace
      - run:
          name: Check DeviceFarm results
          command: |
            mobile-metrics/ios-maps/Scripts/devicefarm.py \
              "$AWS_DEVICE_FARM_PROJECT_ARN" \
              --run-arn-file workspace/benchmark_waiter.json \
              --artifacts-dir BenchmarkResults \
              --output benchmark_results.json
      - run:
          name: Parse XCResult
          command: |
            swift run xcparty metrics --path "$CIRCLE_WORKING_DIRECTORY/workspace/metrics.xcresult" \
              -r . \
              --single-run-test-ids "SpecsBenchmark/testStreetsMunichTtrcCold()" \
              --output "$CIRCLE_WORKING_DIRECTORY/ios-maps-carbon-v2.json"
          working_directory: mapbox-maps-ios/scripts/xcparty
      - store_artifacts:
          path: ios-maps-carbon-v2.json
      - run:
          name: Test failures
          command: swift run xcparty failures "$CIRCLE_WORKING_DIRECTORY/workspace/metrics.xcresult"
          working_directory: mapbox-maps-ios/scripts/xcparty
          when: on_fail
      - checkout-mobile-metrics
      - run:
          name: Upload metrics to AWS
          command: |
            gzip ios-maps-carbon-v2.json
            mv ios-maps-carbon-v2.json.gz ios-maps-carbon-v2-${CIRCLE_BUILD_NUM-1}.json.gz
            sh mobile-metrics/scripts/publish_to_aws.sh mobile_production.performance ios-maps-carbon-v2-${CIRCLE_BUILD_NUM-1}.json.gz

commands:
  build-benchmark:
    steps:
      - run:
          name: Build Benchmark
          command: |
            xcodebuild -resolvePackageDependencies -scheme MobileMetrics -derivedDataPath DerivedData
            xcodebuild build-for-testing -scheme MobileMetrics -configuration Release CODE_SIGN_IDENTITY="" CODE_SIGNING_REQUIRED=NO CODE_SIGNING_ALLOWED=NO ENABLE_TESTABILITY=YES -derivedDataPath DerivedData
          working_directory: benchmark/

  build-maps-xcframework:
    parameters:
      upload-size-metrics:
        type: boolean
        default: true
    steps:
      - run:
          name: Install dependencies
          command: brew install xcodegen
          environment:
            HOMEBREW_NO_AUTO_UPDATE: 1
            HOMEBREW_NO_INSTALL_CLEANUP: 1
      - run:
          name: Build Maps SDK (dynamic)
          working_directory: mapbox-maps-ios/scripts/release/packager
          command: |
            ./package-mapbox-maps.sh dynamic
            cp MapboxMaps.zip ~/project/MapboxMaps.zip
      - store_artifacts:
          path: MapboxMaps.zip
      - persist_to_workspace:
          root: .
          paths:
            - MapboxMaps.zip
      - run:
          name: Prepare for binary size metrics
          command: |
            brew install mint
            pip3 install gitpython awscli
            echo "export PATH=\"$HOME/.mint/bin:$PATH\"" >> $BASH_ENV
            mint install git@github.com:mapbox/ios-binary-size.git
            unzip MapboxMaps.zip "artifacts/MapboxMaps.xcframework/*"
      - unless:
          condition: << parameters.upload-size-metrics >>
          steps:
            - run:
                name: Calculate binary size metrics
                command: |
                  BASELINE_TOLERANCE=${BASELINE_TOLERANCE:-10}
                  mobile-metrics/scripts/ios-binary-analyzer.py \
                      -r . \
                      -g "mapbox-maps-ios" \
                      -x "artifacts/MapboxMaps.xcframework" \
                      --name "ios-maps-v10-benchmark" \
                      --build ${CIRCLE_BUILD_NUM} \
                      -t ${BASELINE_TOLERANCE} \
                      --baseline mapbox-maps-ios/baselines/binary-size/MapboxMaps.json \
                      --dryrun
      - when:
          condition: << parameters.upload-size-metrics >>
          steps:
            - run:
                name: Calculate and upload binary size metrics
                command: |
                  mobile-metrics/scripts/ios-binary-analyzer.py \
                      -r . \
                      -g "mapbox-maps-ios" \
                      -x "artifacts/MapboxMaps.xcframework" \
                      --name "ios-maps-v10-benchmark" \
                      --build ${CIRCLE_BUILD_NUM}

  checkout-maps-submodule:
    steps:
      - run:
          name: Checkout Maps iOS
          command: |
            git submodule update --init

            # If parameter is not empty, checkout the commit
            if [[ -n "<< pipeline.parameters.maps-ios-checkout-reference >>" ]];then
              git -C mapbox-maps-ios checkout << pipeline.parameters.maps-ios-checkout-reference >>
              MAPS_COMMIT_HASH=$(git -C mapbox-maps-ios rev-parse HEAD)
              echo "export MAPS_COMMIT_HASH=${MAPS_COMMIT_HASH}" >> $BASH_ENV
              cat $BASH_ENV

              git -C mapbox-maps-ios branch -a --contains HEAD | cat

            fi

            set -x
            git submodule status

  checkout-mobile-metrics:
    steps:
      - run:
          name: Checkout Mobile Metrics repository
          command: git submodule update --init mobile-metrics

  checkout-maps-internal:
    steps:
      - run:
          name: Checkout Maps Internal repository
          command: git submodule update --init mapbox-maps-internal

executors:
  xcode-min:
    macos:
      xcode: 13.3.0
    resource_class: macos.x86.medium.gen2
  base-docker:
    docker:
      - image: cimg/base:stable
    resource_class: small

orbs:
  mapbox:
    commands:
      add-mapbox-ssh-key:
        steps:
          - add_ssh_keys:
              fingerprints:
                - 3b:cd:47:bf:57:9c:e5:36:b0:4d:5f:12:5e:d3:b3:3e

      add-mapbox-netrc:
        parameters:
          token:
            type: string
            default: $SDK_REGISTRY_TOKEN
        steps:
          - run:
              name: Configure .netrc
              command: |
                echo "machine api.mapbox.com login mapbox password << parameters.token >>" >> ~/.netrc
                chmod 0600 ~/.netrc
                cat ~/.netrc

      add-mapbox-filetoken:
        parameters:
          token:
            type: string
            default: $SDK_REGISTRY_TOKEN
          path:
            type: string
            default: ~/.mapbox
        steps:
          - run:
              name: Add Mapbox Token to file
              command: |
                echo "<< parameters.token >>" > <<parameters.path>>

      install-mbx-ci:
        parameters:
          platform:
            type: enum
            enum:
              - darwin
              - linux
            default: darwin
          arch:
            type: enum
            enum:
              - amd64
              - arm64
            default: amd64
          version:
            type: string
            default: latest
        steps:
          - run:
              name: Install << parameters.version >> mbx-ci
              command: |
                unameOut="$(uname -s)"
                case "${unameOut}" in
                    Linux*)     MBX_INSTALL_PATH="$HOME/bin";;
                    Darwin*)    MBX_INSTALL_PATH="/usr/local/bin/";;
                    *)          MBX_INSTALL_PATH="/usr/local/bin/"
                esac
                curl -Ls https://mapbox-release-engineering.s3.amazonaws.com/mbx-ci/<<parameters.version>>/mbx-ci-<<parameters.platform>>-<<parameters.arch>> > $MBX_INSTALL_PATH/mbx-ci
                chmod 755 $MBX_INSTALL_PATH/mbx-ci
                mbx-ci aws setup

      set-github-commit-status:
        parameters:
          hash:
            type: string
          state:
            type: enum
            enum:
              - pending
              - success
          repository:
            type: string
          company:
            type: string
            default: mapbox
          token:
            type: string
            default: $GITHUB_TOKEN
          target_url:
            type: string
            default: $CIRCLE_BUILD_URL
          description:
            type: string
            default: ""
          fail_description:
            type: string
            default: Job failed
          context:
            type: string
            default: "internal: $CIRCLE_JOB"
        steps:
          - run:
              name: Set github status
              command: |
                if [ -n "<< parameters.hash >>" ]; then
                  curl -X "POST" "https://api.github.com/repos/<< parameters.company >>/<< parameters.repository >>/statuses/<< parameters.hash >>" \
                      -H "Authorization: Token << parameters.token >>" \
                      -H 'Content-Type: application/json; charset=utf-8' \
                      -d "{
                        \"target_url\": \"<< parameters.target_url >>\",
                        \"state\": \"<< parameters.state >>\",
                        \"description\": \"<< parameters.description >>\",
                        \"context\": \"<< parameters.context >>\"
                      }"
                fi
          - when:
              condition:
                equal: [<< parameters.state >>, success]
              steps:
                 - run:
                    name: Set github status
                    command: |
                      if [ -n "<< parameters.hash >>" ]; then
                        curl -X "POST" "https://api.github.com/repos/<< parameters.company >>/<< parameters.repository >>/statuses/<< parameters.hash >>" \
                            -H "Authorization: Token << parameters.token >>" \
                            -H 'Content-Type: application/json; charset=utf-8' \
                            -d "{
                              \"target_url\": \"<< parameters.target_url >>\",
                              \"state\": \"failure\",
                              \"description\": \"<< parameters.fail_description >>\",
                              \"context\": \"<< parameters.context >>\"
                            }"
                      fi
                    when: on_fail


      github-commit-progress:
        parameters:
          steps:
            type: steps
          commit:
            type: string
          repository:
            type: string
          company:
            type: string
            default: mapbox
          token:
            type: string
            default: $GITHUB_TOKEN
          target_url:
            type: string
            default: $CIRCLE_BUILD_URL
          context:
            type: string
            default: "internal: $CIRCLE_JOB"
        steps:
          - set-github-commit-status:
              company: << parameters.company >>
              context: << parameters.context >>
              description: MapboxCI is running your tests
              hash: << parameters.commit >>
              repository: << parameters.repository >>
              state: pending
              target_url: << parameters.target_url >>
              token: << parameters.token >>
          - steps: << parameters.steps >>
          - set-github-commit-status:
              company: << parameters.company >>
              context: << parameters.context >>
              description: Your tests passed on MapboxCI!
              fail_description: Your tests didn't pass on MapboxCI!
              hash: << parameters.commit >>
              repository: << parameters.repository >>
              state: success
              target_url: << parameters.target_url >>
              token: << parameters.token >>

      prepare-build-for-device-testing:
        parameters:
          derivedDataPath:
            type: string
          outputPath:
            type: string
          testingService:
            type: enum
            enum:
              - DeviceFarm
            default: DeviceFarm
          storeArtifacts:
            type: boolean
            default: true
        steps:
          - run:
              name: Assemble packages for device testing
              environment:
                DERIVED_DATA_PATH: << parameters.derivedDataPath >>
                OUTPUT_DATA_PATH: << parameters.outputPath >>
              command: |
                zip -r Products.zip $DERIVED_DATA_PATH/Build/Products/
                APP_PATH=$(find "$DERIVED_DATA_PATH" -name "*.app")
                TMP_PATH=$(mktemp -d)
                PAYLOAD_PATH="$TMP_PATH/Payload"

                mkdir -p "$PAYLOAD_PATH"
                mkdir -p "$OUTPUT_DATA_PATH"

                # Copy debug symbols
                DEBUG_SYMBOLS_PATH="$PAYLOAD_PATH/DebugSymbols"
                mkdir $DEBUG_SYMBOLS_PATH
                find $DERIVED_DATA_PATH/Build/Products/ -iname "*.dSYM" -exec cp -r {} $DEBUG_SYMBOLS_PATH \;
                find $DERIVED_DATA_PATH/Build/Products/ -iname "*.bcsymbolmap" -exec cp -r {} $DEBUG_SYMBOLS_PATH \;

                cp -R "$APP_PATH" "$PAYLOAD_PATH"

                # Copy the tests out
                XCTEST_PATH=$(find "$PAYLOAD_PATH" -name "*.xctest")

                cp -r "$XCTEST_PATH" "$TMP_PATH"

                # Copy the testrun in
                TMP_PAYLOAD_APP=$(find "$PAYLOAD_PATH" -name "*.app")
                cp "$DERIVED_DATA_PATH/Build/Products/"*.xctestrun  "$TMP_PAYLOAD_APP"

                # Zip up
                (
                  cd "$TMP_PATH"
                  zip -r App.ipa Payload
                  zip -r AppTests.zip *.xctest
                )

                cp "$TMP_PATH/App.ipa" "$TMP_PATH/AppTests.zip" "$OUTPUT_DATA_PATH"
          - when:
              condition: << parameters.storeArtifacts >>
              steps:
                - store_artifacts:
                    path: << parameters.outputPath >>/App.ipa
                - store_artifacts:
                    path: Products.zip
                - store_artifacts:
                    path: << parameters.outputPath >>/AppTests.zip
                - persist_to_workspace:
                    root: << parameters.outputPath >>
                    paths:
                      - App.ipa
                      - AppTests.zip
