#!/usr/bin/env python3

import os
import sys
import argparse
import json

def print_phase(phase: str):
    print('\033[93m' + f"{phase}" + '\033[0m')

def main():
    parser = argparse.ArgumentParser(description='Generate project to build Maps SDK dependencies from sources.')
    parser.add_argument('--commit', default="main", type=str,
                        help='commit to use for Mapbox Maps iOS')
    parser.add_argument('--gl-native-commit', default="internal",
                        type=str, help='commit to use for GL Native Internal')
    parser.add_argument('--common-commit', default=None,
                        type=str, help='commit to use for Common SDK')
    parser.add_argument('--turf-commit', default="main",
                        type=str, help='commit to use for Turf')
    parser.add_argument('--mme-commit', default="main",
                        type=str, help='commit to use for Mapbox Mobile Events')

    parser.add_argument('--stable', action='store_true',
                        help='use dependencies from the last release')
    parser.add_argument('--private-commit', type=str,
                        help='commit to use for private version of Mapbox Maps iOS')

    args = parser.parse_args()
    project = "mapbox-maps-ios-private" if args.private_commit else "mapbox-maps-ios"
    project_commit = args.private_commit if args.private_commit else args.commit

    if not os.path.exists("build"):
        os.mkdir("build")
    os.chdir("build")


    print_phase(f"Checkout Mapbox Maps iOS ({project}@{project_commit})")

    checkout_repo(project, project_commit)

    if args.stable:
        with open(f"{project}/scripts/release/packager/versions.json") as f:
            versions = json.load(f)

        if args.gl_native_commit is None:
            args.gl_native_commit = "maps-v" + versions["MapboxCoreMaps"]

        if args.turf_commit is None:
            args.turf_commit = versions["Turf"]

        if args.mme_commit is None:
            args.mme_commit = versions["MapboxMobileEvents"]

    print_phase("Finalized args: " + str(args))

    print_phase(f"Checkout GL Native (@{args.gl_native_commit})")
    checkout_repo("mapbox-gl-native-internal",
                  args.gl_native_commit, checkout_submodules=True, submodules_path="vendor")
    # configure project
    os.chdir("mapbox-gl-native-internal")
    if args.common_commit is not None:
        print_phase(f"Checkout custom Common SDK (@{args.common_commit})")
        os.system(f"git -C vendor/common checkout {args.common_commit}")

    os.system("pwd")
    print_phase("Configure GL Native")
    configure_command = """cmake -B build/ios
                            -DBUILD_SHARED_LIBS=OFF
                            -DCMAKE_ARCHIVE_OUTPUT_DIRECTORY="./lib"
                            -DCMAKE_BUILD_TYPE=Release
                            -DCMAKE_OSX_SYSROOT=iphoneos
                            -DCMAKE_SYSTEM_NAME=iOS
                            -DMAPBOX_COMMON_BUILD_TYPE='SHARED'
                            -DMAPBOX_COMMON_TARGET_NAME='MapboxCommon'
                            -DMAPBOX_COMMON_ADD_LIBOUTDIR_TO_FRAMEWORK_SEARCH_PATH=ON
                            -DMAPBOX_ENABLE_FRAMEWORK=ON
                            -DMBGL_WITH_IOS_CCACHE=ON
                            -DMBGL_WITH_METAL=ON
                            -GXcode""".replace("\n", "\\\n")

    print(configure_command)
    os.system(configure_command)

    # xcodegen chokes on the PBXBuildStyle objects in the generated project file.
    # They're a legacy construct, and everything works if you just delete them.
    # https://github.com/tuist/XcodeProj/issues/688
    os.system("sed -i '' '/Begin PBXBuildStyle section/,/End PBXBuildStyle section/d' 'build/ios/Mapbox GL Native.xcodeproj/project.pbxproj'")
    os.chdir("..")

    print_phase(f"Checkout Turf (@{args.turf_commit})")
    checkout_repo("turf-swift", args.turf_commit)

    print_phase(f"Checkout Mapbox Mobile Events (@{args.mme_commit})")
    checkout_repo("mapbox-events-ios", args.mme_commit)

    # leave build directory
    os.chdir("..")

    print_phase("Patch GL Native project")
    os.system("swift run --package-path tools/PatchGLNativeXCProject patch-cmake-xcproject build/mapbox-gl-native-internal/build/ios/Mapbox\ GL\ Native.xcodeproj")

    print_phase(f"Create {project}/developer.xcconfig")
    with open(f"build/{project}/developer.xcconfig", "w") as f:
        f.write("SWIFT_TREAT_WARNINGS_AS_ERRORS[config=Release] = NO")

    # Generate Xcode projects
    print_phase("Generate Xcode projects")
    os.system(f"PROJECT={project} xcodegen -s MapboxMaps.yml")
    os.system(f"PROJECT={project} xcodegen -s Examples.yml")
    os.system(f"PROJECT={project} xcodegen -s DebugApp.yml")

#   # Open the resulting project
    print_phase("Open Xcode workspace")
    os.system("xed Umbrella.xcworkspace")


def checkout_repo(repo_name: str, repo_branch: str, checkout_submodules=False, submodules_path=None):
    # checkout the repo if folder doesn't exist. Otherwise, fetch the latest changes
    os.system("pwd")
    if not os.path.exists(repo_name):
        print("Cloning " + repo_name + "...")
        command = f"git clone --branch {repo_branch} git@github.com:mapbox/{repo_name}.git {repo_name}"
        print(command)
        os.system(command)
    else:
        print("Fetching latest changes for " + repo_name + "...")
        os.chdir(repo_name)
        os.system("git reset --hard && git clean -dffx")
        os.system("git fetch")
        os.system("git checkout -f " + repo_branch + " --")
        os.system("git pull origin " + repo_branch)
        os.chdir("..")

    if checkout_submodules:
        print("Checkout submodules for " + repo_name + "...")
        os.chdir(repo_name)
        os.system("git submodule foreach --recursive 'git reset --hard && git clean -dffx'")
        if submodules_path is None:
            os.system("git submodule update --init --recursive")
        else:
            os.system("git submodule update --init --recursive " + submodules_path)
        os.chdir("..")


main()
