<%
  const source = locals
  const name = locals.name
  const type = locals.type
  const doc = locals.doc
  const properties = locals.properties
-%>
// This file is generated.
import Foundation

/// <%- type[`values`][Object.keys(type[`values`])[0]][`doc`] %>
///
/// - SeeAlso: [Mapbox Style Specification](https://docs.mapbox.com/mapbox-gl-js/style-spec/sources/#<%- name %>)
<%_ const sourceName = (camelizeWithUndercoreRemoved(name) === "GeoJson")? 'GeoJSON' : camelizeWithUndercoreRemoved(name) _%>
public struct <%- sourceName %>Source: Source {

    public let type: SourceType
    public let id: String
    <%_ for (const property of properties) { -%>
    <%_ if (property[`name`] !== '*' && property[`name`] !== 'type') { -%>

    <%_ %><%- blockDoc(property, 4) %>
    public var <%- camelizeWithLeadingLowercase(property.name) %>: <%- propertySwiftType(property)%>?
    <%_ } -%>
    <%_ } -%>

    public init(id: String) {
        self.id = id
        self.type = .<%- camelizeWithLeadingLowercaseUndercoreRemoved(name) %>
    }
}

extension <%- sourceName _%>Source {
    enum CodingKeys: String, CodingKey {
        case id = "id"
        <%_ for (const property of properties) { -%>
        <%_ if (property[`name`] !== '*') { -%>
        case <%- camelizeWithLeadingLowercase(property.name) %> = "<%- property.name %>"
        <%_ } -%>
        <%_ } -%>
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        if encoder.userInfo[.volatilePropertiesOnly] as? Bool == true  {
            try encodeVolatile(to: encoder, into: &container)
        } else if encoder.userInfo[.nonVolatilePropertiesOnly] as? Bool == true  {
            try encodeNonVolatile(to: encoder, into: &container)
        } else {
            try encodeVolatile(to: encoder, into: &container)
            try encodeNonVolatile(to: encoder, into: &container)
        }
    }

    private func encodeVolatile(to encoder: Encoder, into container: inout KeyedEncodingContainer<CodingKeys>) throws {
        <%_ for (const property of properties) { _%>
        <%_ if (property.volatile === true) { _%>
        try container.encodeIfPresent(<%- camelizeWithLeadingLowercase(property.name) %>, forKey: .<%- camelizeWithLeadingLowercase(property.name) %>)
        <%_ } -%>
        <%_ } -%>
    }

    private func encodeNonVolatile(to encoder: Encoder, into container: inout KeyedEncodingContainer<CodingKeys>) throws {
        try container.encodeIfPresent(id, forKey: .id)
        <%_ for (const property of properties) { _%>
        <%_ if (property[`name`] !== '*' && property.volatile !== true) { _%>
        try container.encodeIfPresent(<%- camelizeWithLeadingLowercase(property.name) %>, forKey: .<%- camelizeWithLeadingLowercase(property.name) %>)
        <%_ } -%>
        <%_ } -%>
    }
}
// End of generated file.
