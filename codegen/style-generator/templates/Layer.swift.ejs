<%
  const type = locals.type
  const properties = locals.properties
  const layoutProperties = locals.layoutProperties
  const paintProperties = locals.paintProperties
  const doc = locals.doc
  const isExperimental = locals.experimental
  const isInternal = locals.internal
-%>
// This file is generated.
import Foundation

/// <%- doc %>
<% if (!isInternal) { -%>
///
/// - SeeAlso: [Mapbox Style Specification](https://www.mapbox.com/mapbox-gl-style-spec/#layers-<%- type %>)
<% } -%>
<%if (isExperimental) { -%>@_spi(Experimental) <% } -%>public struct <%- camelize(type) %>Layer: Layer {

    // MARK: - Conformance to `Layer` protocol
    public var id: String
    public let type: LayerType
    public var filter: Expression?
    public var source: String?
    public var sourceLayer: String?
    public var minZoom: Double?
    public var maxZoom: Double?

    /// Whether this layer is displayed.
    public var visibility: Value<Visibility>?
    <%_ for (const property of layoutProperties) { -%>

    /// <%- markdownFriendlyDoc(property) %>
    public var <%- camelizeWithLeadingLowercase(property.name) %>: <%- propertySwiftValueType(property) %>?
    <%_ if (property.transition) { -%>

    /// Transition options for `<%- camelize(property.name) %>`.
    public var <%- camelizeWithLeadingLowercase(property.name) %>Transition: StyleTransition?
    <%_ } -%>
    <%_ } -%>
    <%_ for (const property of paintProperties) { -%>

    /// <%- markdownFriendlyDoc(property) %>
    public var <%- camelizeWithLeadingLowercase(property.name) %>: <%- propertySwiftValueType(property) %>?
    <%_ if (property.transition) { -%>

    /// Transition options for `<%- camelizeWithLeadingLowercase(property.name) _%>`.
    public var <%- camelizeWithLeadingLowercase(property.name) _%>Transition: StyleTransition?
    <%_ } -%>
    <%_ } -%>

    public init(id: String) {
        self.id = id
        self.type = LayerType.<%- camelizeWithLeadingLowercase(type) %>
        self.visibility = .constant(.visible)
    }

    public func encode(to encoder: Encoder) throws {
        let nilEncoder = NilEncoder(userInfo: encoder.userInfo)

        var container = encoder.container(keyedBy: RootCodingKeys.self)
        try container.encode(id, forKey: .id)
        try container.encode(type, forKey: .type)
        try nilEncoder.encode(filter, forKey: .filter, to: &container)
        try nilEncoder.encode(source, forKey: .source, to: &container)
        try nilEncoder.encode(sourceLayer, forKey: .sourceLayer, to: &container)
        try nilEncoder.encode(minZoom, forKey: .minZoom, to: &container)
        try nilEncoder.encode(maxZoom, forKey: .maxZoom, to: &container)

        var paintContainer = container.nestedContainer(keyedBy: PaintCodingKeys.self, forKey: .paint)
        <%_ for (const property of paintProperties) { -%>
        try nilEncoder.encode(<%- camelizeWithLeadingLowercase(property.name) %>, forKey: .<%- camelizeWithLeadingLowercase(property.name) %>, to: &paintContainer)
        <%_ if (property.transition) { -%>
        try nilEncoder.encode(<%- camelizeWithLeadingLowercase(property.name) %>Transition, forKey: .<%- camelizeWithLeadingLowercase(property.name) %>Transition, to: &paintContainer)
        <%_ } -%>
        <%_ } -%>

        var layoutContainer = container.nestedContainer(keyedBy: LayoutCodingKeys.self, forKey: .layout)
        try nilEncoder.encode(visibility, forKey: .visibility, to: &layoutContainer)
        <%_ for (const property of layoutProperties) { -%>
        try nilEncoder.encode(<%- camelizeWithLeadingLowercase(property.name) %>, forKey: .<%- camelizeWithLeadingLowercase(property.name) %>, to: &layoutContainer)
        <%_ if (property.transition) { -%>
        try nilEncoder.encode(<%- camelizeWithLeadingLowercase(property.name) %>Transition, forKey: .<%- camelizeWithLeadingLowercase(property.name) %>Transition, to: &layoutContainer)
        <%_ } -%>
        <%_ } -%>
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: RootCodingKeys.self)
        id = try container.decode(String.self, forKey: .id)
        type = try container.decode(LayerType.self, forKey: .type)
        filter = try container.decodeIfPresent(Expression.self, forKey: .filter)
        source = try container.decodeIfPresent(String.self, forKey: .source)
        sourceLayer = try container.decodeIfPresent(String.self, forKey: .sourceLayer)
        minZoom = try container.decodeIfPresent(Double.self, forKey: .minZoom)
        maxZoom = try container.decodeIfPresent(Double.self, forKey: .maxZoom)

        if let paintContainer = try? container.nestedContainer(keyedBy: PaintCodingKeys.self, forKey: .paint) {
            <%_ for (const property of paintProperties) { -%>
            <%- camelizeWithLeadingLowercase(property.name) %> = try paintContainer.decodeIfPresent(<%- propertySwiftValueType(property) %>.self, forKey: .<%- camelizeWithLeadingLowercase(property.name) %>)
            <%_ if (property.transition) { -%>
            <%- camelizeWithLeadingLowercase(property.name) %>Transition = try paintContainer.decodeIfPresent(StyleTransition.self, forKey: .<%- camelizeWithLeadingLowercase(property.name) %>Transition)
            <%_ } -%>
            <%_ } -%>
        }

        if let layoutContainer = try? container.nestedContainer(keyedBy: LayoutCodingKeys.self, forKey: .layout) {
            visibility = try layoutContainer.decodeIfPresent(Value<Visibility>.self, forKey: .visibility)
            <%_ for (const property of layoutProperties) { -%>
            <%- camelizeWithLeadingLowercase(property.name) %> = try layoutContainer.decodeIfPresent(<%- propertySwiftValueType(property) %>.self, forKey: .<%- camelizeWithLeadingLowercase(property.name) %>)
            <%_ if (property.transition) { -%>
            <%- camelizeWithLeadingLowercase(property.name) %>Transition = try layoutContainer.decodeIfPresent(StyleTransition.self, forKey: .<%- camelizeWithLeadingLowercase(property.name) %>Transition)
            <%_ } -%>
            <%_ } -%>
        }
    }

    enum RootCodingKeys: String, CodingKey {
        case id = "id"
        case type = "type"
        case filter = "filter"
        case source = "source"
        case sourceLayer = "source-layer"
        case minZoom = "minzoom"
        case maxZoom = "maxzoom"
        case layout = "layout"
        case paint = "paint"
    }

    enum LayoutCodingKeys: String, CodingKey {
        <%_ for (const property of layoutProperties) { -%>
        case <%- camelizeWithLeadingLowercase(property.name) %> = "<%- property.name %>"
        <%_ if (property.transition) { -%>
        case <%- camelizeWithLeadingLowercase(property.name) %>Transition = "<%- property.name %>-transition"
        <%_ } -%>
        <%_ } -%>
        case visibility = "visibility"
    }

    enum PaintCodingKeys: String, CodingKey {
        <%_ for (const property of paintProperties) { -%>
        case <%- camelizeWithLeadingLowercase(property.name) %> = "<%- property.name %>"
        <%_ if (property.transition) { -%>
        case <%- camelizeWithLeadingLowercase(property.name) %>Transition = "<%- property.name %>-transition"
        <%_ } -%>
        <%_ } -%>
    }
}

// End of generated file.
