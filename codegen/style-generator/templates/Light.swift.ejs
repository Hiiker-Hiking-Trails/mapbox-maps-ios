<%
  const properties = locals.properties
  const doc = locals.doc
  const name = locals.name
  const isExperimental = locals.experimental
-%>
// This file is generated.
import Foundation

/// <%- doc %>
///
/// - SeeAlso: [Mapbox Style Specification](https://www.mapbox.com/mapbox-gl-style-spec/#light)
<%if (isExperimental) { -%>
#if swift(>=5.8)
    @_documentation(visibility: public)
#endif
<% } -%>
<%if (isExperimental) { -%>@_spi(Experimental) <% } -%>public struct <%- camelize(name) %>Light: Codable, StyleEncodable {

    /// Unique light name
    public let id: String

    /// Type of the light.
    public let type: LightType = .<%- name %>
    <%_ for (const property of properties) { -%>

    /// <%- markdownFriendlyDoc(property) %>
    <% if (property.experimental) { -%>@_spi(Experimental) <% } -%>public var <%- camelizeWithLeadingLowercase(property.name) %>: <%- propertySwiftValueType(property) %>?
    <%_ if (property.transition) { -%>

    /// Transition property for `<%- camelizeWithLeadingLowercase(property.name) %>`
    <% if (property.experimental) { -%>@_spi(Experimental) <% } -%>public var <%- camelizeWithLeadingLowercase(property.name) %>Transition: StyleTransition?
    <%_ } -%>
    <%_ } -%>

    public init(id: String = UUID().uuidString) {
        self.id = id
    }

    enum CodingKeys: String, CodingKey {
        case id = "id"
        case type = "type"
        <%_ for (const property of properties) { -%>
        case <%- camelizeWithLeadingLowercase(property.name) %> = "<%- property.name %>"
        <%_ if (property.transition) { -%>
        case <%- camelizeWithLeadingLowercase(property.name) %>Transition = "<%- property.name %>-transition"
        <%_ } -%>
        <%_ } -%>
    }
}

// End of generated file.
