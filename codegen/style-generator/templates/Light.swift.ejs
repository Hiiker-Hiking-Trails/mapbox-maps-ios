<%
  const properties = locals.properties
  const doc = locals.doc
  const name = locals.name
  const isExperimental = locals.experimental
-%>
// This file is generated.
import Foundation

/// <%- doc %>
///
/// - SeeAlso: [Mapbox Style Specification](https://www.mapbox.com/mapbox-gl-style-spec/#light)
<%if (isExperimental) { -%>
#if swift(>=5.8)
    @_documentation(visibility: public)
#endif
<% } -%>
<%if (isExperimental) { -%>@_spi(Experimental) <% } -%>public struct <%- camelize(name) %>Light: Codable, StyleEncodable {

    /// Unique light name
<%if (isExperimental) { -%>
#if swift(>=5.8)
    @_documentation(visibility: public)
#endif
<% } -%>
    public let id: String

    /// Type of the light.
<%if (isExperimental) { -%>
#if swift(>=5.8)
    @_documentation(visibility: public)
#endif
<% } -%>
    public let type: LightType = .<%- name %>
    <%_ for (const property of properties) { -%>

    /// <%- markdownFriendlyDoc(property) %>
<%if (isExperimental) { -%>
#if swift(>=5.8)
    @_documentation(visibility: public)
#endif
<% } -%>
    <% if (property.experimental) { -%>@_spi(Experimental) <% } -%>public var <%- camelizeWithLeadingLowercase(property.name) %>: <%- propertySwiftValueType(property) %>?
    <%_ if (property.transition) { -%>

    /// Transition property for `<%- camelizeWithLeadingLowercase(property.name) %>`
<%if (isExperimental) { -%>
#if swift(>=5.8)
    @_documentation(visibility: public)
#endif
<% } -%>
    <% if (property.experimental) { -%>@_spi(Experimental) <% } -%>public var <%- camelizeWithLeadingLowercase(property.name) %>Transition: StyleTransition?
    <%_ } -%>
    <%_ } -%>

    /// Creates a new <%- camelizeWithUndercoreRemoved(name) %> light.
<%if (isExperimental) { -%>
#if swift(>=5.8)
    @_documentation(visibility: public)
#endif
<% } -%>
    public init(id: String = UUID().uuidString) {
        self.id = id
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: RootCodingKeys.self)
        try container.encode(id, forKey: .id)
        try container.encode(type, forKey: .type)

        var propertiesContainer = container.nestedContainer(keyedBy: PropertiesCodingKeys.self, forKey: .properties)
        <%_ for (const property of properties) { -%>
        try propertiesContainer.encodeIfPresent(<%- camelizeWithLeadingLowercase(property.name) %>, forKey: .<%- camelizeWithLeadingLowercase(property.name) %>)
        <%_ if (property.transition) { -%>
        try propertiesContainer.encodeIfPresent(<%- camelizeWithLeadingLowercase(property.name) %>Transition, forKey: .<%- camelizeWithLeadingLowercase(property.name) %>Transition)
        <%_ } -%>
        <%_ } -%>
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: RootCodingKeys.self)
        self.id = try container.decode(String.self, forKey: .id)

        if let propertiesContainer = try? container.nestedContainer(keyedBy: PropertiesCodingKeys.self, forKey: .properties) {
            <%_ for (const property of properties) { -%>
            self.<%- camelizeWithLeadingLowercase(property.name) %> = try propertiesContainer.decodeIfPresent(<%- propertySwiftValueType(property) %>.self, forKey: .<%- camelizeWithLeadingLowercase(property.name) %>)
            <%_ if (property.transition) { -%>
            self.<%- camelizeWithLeadingLowercase(property.name) %>Transition = try propertiesContainer.decodeIfPresent(StyleTransition.self, forKey: .<%- camelizeWithLeadingLowercase(property.name) %>Transition)
            <%_ } -%>
            <%_ } -%>
        }
    }

    enum RootCodingKeys: String, CodingKey {
        case id = "id"
        case type = "type"
        case properties = "properties"
    }

    enum PropertiesCodingKeys: String, CodingKey {
        <%_ for (const property of properties) { -%>
        case <%- camelizeWithLeadingLowercase(property.name) %> = "<%- property.name %>"
        <%_ if (property.transition) { -%>
        case <%- camelizeWithLeadingLowercase(property.name) %>Transition = "<%- property.name %>-transition"
        <%_ } -%>
        <%_ } -%>
    }
}

// End of generated file.
