<%
  const propertiesToIgnore = ["id"];
  const properties = locals.properties.filter(property => !propertiesToIgnore.includes(property.name));
  const lightName = locals.name
-%>
// This file is generated.
import Foundation

/// Represents 3D <%- camelizeWithLeadingLowercase(lightName) %> light.
/// - SeeAlso: [Mapbox Style Specification](https://www.mapbox.com/mapbox-gl-style-spec/#light)
<% if (locals.experimental) { -%>@_spi(Experimental) <% } -%>public struct <%- camelizeWithUndercoreRemoved(lightName) %>Light: Light3DProtocol {
    /// Type of the light.
    public let lightType: Light3DType

    /// The unique ID for this light. This must be set when configuring the lights.
    public let id: String
    <%_ for (const property of properties) { -%>

    /// <%- markdownFriendlyDoc(property) %>
    <% if (property.experimental) { -%>@_spi(Experimental) <% } -%>public var <%- camelizeWithLeadingLowercase(property.name) %>: <%- propertySwiftValueType(property) %>?
    <%_ if (property.transition) { -%>

    /// Transition property for `<%- camelizeWithLeadingLowercase(property.name) %>`
    <% if (property.experimental) { -%>@_spi(Experimental) <% } -%>public var <%- camelizeWithLeadingLowercase(property.name) %>Transition: StyleTransition?
    <%_ } -%>
    <%_ } -%>

    public init(id: String) {
        self.id = id
        self.lightType = .<%- camelizeWithLeadingLowercase(lightName) %>
    }

    enum RootCodingKeys: String, CodingKey {
        case type
        case id
        case properties
    }

    enum PropertyCodingKeys: String, CodingKey {
        <%_ for (const property of properties) { -%>
        case <%- camelizeWithLeadingLowercase(property.name) %> = "<%- property.name %>"
        <%_ if (property.transition) { -%>
        case <%- camelizeWithLeadingLowercase(property.name) %>Transition = "<%- property.name %>-transition"
        <%_ } -%>
        <%_ } -%>
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: RootCodingKeys.self)
        try container.encode(id, forKey: .id)
        try container.encode(lightType, forKey: .type)

        var propertyContainer = container.nestedContainer(keyedBy: PropertyCodingKeys.self, forKey: .properties)
        <%_ for (const property of properties) { -%>
        try propertyContainer.encodeIfPresent(<%- camelizeWithLeadingLowercase(property.name) %>, forKey: .<%- camelizeWithLeadingLowercase(property.name) %>)
        <%_ if (property.transition) { -%>
        try propertyContainer.encodeIfPresent(<%- camelizeWithLeadingLowercase(property.name) %>Transition, forKey: .<%- camelizeWithLeadingLowercase(property.name) %>Transition)
        <%_ } -%>
        <%_ } -%>
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: RootCodingKeys.self)
        id = try container.decode(String.self, forKey: .id)
        lightType = try container.decode(Light3DType.self, forKey: .type)

        if let propertyContainer = try? container.nestedContainer(keyedBy: PropertyCodingKeys.self, forKey: .properties) {
            <%_ for (const property of properties) { -%>
            <%- camelizeWithLeadingLowercase(property.name) %> = try propertyContainer.decodeIfPresent(<%- propertySwiftValueType(property) %>.self, forKey: .<%- camelizeWithLeadingLowercase(property.name) %>)
            <%_ if (property.transition) { -%>
            <%- camelizeWithLeadingLowercase(property.name) %>Transition = try propertyContainer.decodeIfPresent(StyleTransition.self, forKey: .<%- camelizeWithLeadingLowercase(property.name) %>Transition)
            <%_ } -%>
            <%_ } -%>
        }
    }
}

// End of generated file.
