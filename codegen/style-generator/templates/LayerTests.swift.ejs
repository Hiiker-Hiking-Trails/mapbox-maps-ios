<%
  const type = locals.type
  const properties = locals.properties
  const layoutProperties = locals.layoutProperties
  const paintProperties = locals.paintProperties
  const doc = locals.doc
  const isExperimental = locals.experimental
  const containsExperimentalApi = properties.some((property) => property.experimental === true) || isExperimental
  const layersWithoutSource = ['background', 'sky', 'location-indicator']
  const shouldIncludeSource = !layersWithoutSource.includes(type)
-%>
// This file is generated
import XCTest
<%if (containsExperimentalApi) { -%>@_spi(Experimental) <% } -%>@testable import MapboxMaps

final class <%- camelize(type) %>LayerTests: XCTestCase {

    func testLayerProtocolMembers() {

        var layer = <%- camelize(type) %>Layer(id: "test-id"<%- shouldIncludeSource ? `, source: "source"` : '' -%>)
        layer.minZoom = 10.0
        layer.maxZoom = 20.0

        XCTAssertEqual(layer.id, "test-id")
        XCTAssertEqual(layer.type, LayerType.<%- camelizeWithLeadingLowercase(type) %>)
        XCTAssertNil(layer.filter)
<% if (shouldIncludeSource) { -%>
        XCTAssert(layer.source == "source")
<% } else { -%>
        XCTAssertNil(layer.source)
<% } -%>

        XCTAssertNil(layer.sourceLayer)
        XCTAssertEqual(layer.minZoom, 10.0)
        XCTAssertEqual(layer.maxZoom, 20.0)
    }

    func testEncodingAndDecodingOfLayerProtocolProperties() {
        var layer = <%- camelize(type) %>Layer(id: "test-id"<%- shouldIncludeSource ? `, source: "source"` : '' %>)
        layer.minZoom = 10.0
        layer.maxZoom = 20.0

        var data: Data?
        do {
            data = try JSONEncoder().encode(layer)
        } catch {
            XCTFail("Failed to encode <%- camelize(type) %>Layer")
        }

        guard let validData = data else {
            XCTFail("Failed to encode <%- camelize(type) %>Layer")
            return
        }

        do {
            let decodedLayer = try JSONDecoder().decode(<%- camelize(type) %>Layer.self, from: validData)
            XCTAssertEqual(decodedLayer.id, "test-id")
            XCTAssertEqual(decodedLayer.type, LayerType.<%- camelizeWithLeadingLowercase(type) %>)
            XCTAssertNil(decodedLayer.filter)
<% if (shouldIncludeSource) { -%>
            XCTAssert(decodedLayer.source == "source")
<% } else { -%>
            XCTAssertNil(decodedLayer.source)
<% } -%>
            XCTAssertNil(decodedLayer.sourceLayer)
            XCTAssertEqual(decodedLayer.minZoom, 10.0)
            XCTAssertEqual(decodedLayer.maxZoom, 20.0)
        } catch {
            XCTFail("Failed to decode <%- camelize(type) %>Layer")
        }
    }

    func testEncodingAndDecodingOfLayoutProperties() {
        var layer = <%- camelize(type) %>Layer(id: "test-id"<%- shouldIncludeSource ? `, source: "source"` : '' %>)
        layer.visibility = .visible
        <%_ for (const property of layoutProperties) { -%>
        layer.<%- camelizeWithLeadingLowercase(property.name) %> = <%- propertySwiftValueType(property) %>.testConstantValue()
        <%_ if (property.transition) { -%>
        layer.<%- camelizeWithLeadingLowercase(property.name) %>Transition = StyleTransition(duration: 10.0, delay: 10.0)
        <%_ } -%>
        <%_ } -%>

        var data: Data?
        do {
            data = try JSONEncoder().encode(layer)
        } catch {
            XCTFail("Failed to encode <%- camelize(type) %>Layer")
        }

        guard let validData = data else {
            XCTFail("Failed to encode <%- camelize(type) %>Layer")
            return
        }

        do {
            let decodedLayer = try JSONDecoder().decode(<%- camelize(type) %>Layer.self, from: validData)
            XCTAssertEqual(decodedLayer.visibility, .visible)
            <%_ for (const property of layoutProperties) { -%>
            XCTAssertEqual(layer.<%- camelizeWithLeadingLowercase(property.name) %>, <%- propertySwiftValueType(property) %>.testConstantValue())
            <%_ } -%>
        } catch {
            XCTFail("Failed to decode <%- camelize(type) %>Layer")
        }
    }

    func testEncodingAndDecodingOfPaintProperties() {
       var layer = <%- camelize(type) %>Layer(id: "test-id"<%- shouldIncludeSource ? `, source: "source"` : '' %>)
       <%_ for (const property of paintProperties) { -%>
       layer.<%- camelizeWithLeadingLowercase(property.name) %> = <%- propertySwiftValueType(property) %>.testConstantValue()
       <%_ if (property.transition) { -%>
       layer.<%- camelizeWithLeadingLowercase(property.name) %>Transition = StyleTransition(duration: 10.0, delay: 10.0)
       <%_ } -%>
       <%_ } -%>

       var data: Data?
       do {
           data = try JSONEncoder().encode(layer)
       } catch {
           XCTFail("Failed to encode <%- camelize(type) %>Layer")
       }

       guard let validData = data else {
           XCTFail("Failed to encode <%- camelize(type) %>Layer")
           return
       }

       do {
           let decodedLayer = try JSONDecoder().decode(<%- camelize(type) %>Layer.self, from: validData)
           XCTAssertEqual(decodedLayer.visibility, .visible)
           <%_ for (const property of paintProperties) { -%>
           XCTAssertEqual(layer.<%- camelizeWithLeadingLowercase(property.name) %>, <%- propertySwiftValueType(property) %>.testConstantValue())
           <%_ } -%>
       } catch {
           XCTFail("Failed to decode <%- camelize(type) %>Layer")
       }
    }
}

// End of generated file
