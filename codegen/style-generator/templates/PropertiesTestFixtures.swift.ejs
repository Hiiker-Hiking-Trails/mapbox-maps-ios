<%
  const properties = locals
-%>
// This file is generated.
// swiftlint:disable file_length
import Foundation
@testable import MapboxMaps

extension Value where T == Visibility {
    static func testConstantValue() -> Value<Visibility> {
        return .constant(Visibility.testConstantValue())
    }
}

extension Visibility {
    static func testConstantValue() -> Visibility {
        return .visible
    }
}
<% for (const property of properties) { -%>
<% if (property.name !== 'visibility') { -%>
<%_ const propertyName = (property['projection-property'] === true) ? `StyleProjection${camelize(property.name)}` : camelize(property.name) _%>

// MARK: <%- snakeCaseUpper(property.name) %>

extension Value where T == <%- camelize(propertyName) %> {
    static func testConstantValue() -> Value<<%- camelize(propertyName) %>> {
        return .constant(<%- camelize(propertyName) %>.testConstantValue())
    }
}

extension <%- camelize(propertyName) %> {
    static func testConstantValue() -> <%- camelize(propertyName) %> {
        return .<%- camelizeWithLeadingLowercase(Object.keys(property.values)[0]) %>
    }

    static func random() -> <%- camelize(propertyName) %> {
        let allCases: [<%- camelize(propertyName) %>] = [<%- Object.keys(property.values).map(p => `.${camelizeWithLeadingLowercase(p)}`).join(', ') %>]
        return allCases.randomElement()!
    }
}
<% } -%>
<% } -%>
// End of generated file.
